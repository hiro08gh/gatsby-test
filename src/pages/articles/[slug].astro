---
import { Marked } from "marked";
import type { RendererObject } from "marked";
import { markedHighlight } from "marked-highlight";
import hljs from "highlight.js";
import "highlight.js/styles/atom-one-dark.css";
import { RichEditorToMarkdownParser } from "rich-editor-to-markdown-parser";
import { getArticles, getArticle } from "@/libs/api";
import { formatDate } from "@/libs/formatDate";
import Layout from "@/layouts/Layout.astro";

const marked = new Marked(
  markedHighlight({
    langPrefix: "hljs language-",
    highlight(code, lang) {
      const language = hljs.getLanguage(lang) ? lang : "plaintext";
      return hljs.highlight(code, { language }).value;
    },
  }),
);
const renderer: RendererObject = {
  heading(text, level) {
    return `<h${level}>
              <a name="${text}" class="no-underline" href="#${text}">
              ${text}
              </a>
            </h${level}>`;
  },
};

marked.use({ renderer });

export async function getStaticPaths() {
  const res = await getArticles({ fields: ["id"] });
  return res.contents.map((content) => ({
    params: {
      slug: content.id,
    },
  }));
}

const { slug } = Astro.params;
const article = await getArticle(slug as string);
const tokens = marked.lexer(RichEditorToMarkdownParser(article.body));
const toc = tokens.filter(
  (token) => token.type === "heading" && token.depth < 5,
);
---

<Layout title={article.title + "- hiro08.com"}>
  <main class="post mx-auto flex w-full flex-col gap-4">
    <header class="mb-5" role="presentation">
      <h1 class="text-2xl text-md mb-6">
        {article.title}
      </h1>
      <time class="mr-5">{formatDate(article.publishedAt || "")}</time>
      <a href={`/categories/${article.category.id}`}>
        <span
          class="bg-gray-100 text-gray-800 text-sm font-medium me-2 px-2.5 py-0.5 rounded dark:bg-gray-700 dark:text-gray-300"
        >
          {article.category.name}
        </span>
      </a>
    </header>
    <img
      src={article.thumbnail.url}
      alt={article.title}
      class="w-full rounded-sm mb-5"
    />
    {
      toc.length !== 0 && (
        <aside class="mb-5">
          <ul>
            <li class="list-none mb-2">目次</li>
            {toc.map((value) => (
              <li class="list-none mb-2">
                {value.type === "heading" && (
                  <a href={`#${value.text}`}>{value.text}</a>
                )}
              </li>
            ))}
          </ul>
        </aside>
      )
    }
    <div class="relative max-auto">
      <div
        class="post"
        set:html={marked.parse(RichEditorToMarkdownParser(article.body))}
      />
    </div>
  </main>
</Layout>
